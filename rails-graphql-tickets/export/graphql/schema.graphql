input AuthProviderCredentialsInput {
  email: String!
  password: String!
}

input AuthProviderSignupData {
  credentials: AuthProviderCredentialsInput
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Mutation {
  createUser(authProvider: AuthProviderSignupData, name: String!): User!
  signInUser(credentials: AuthProviderCredentialsInput): SignInUserPayload
}

type Organization {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String
  productions: [Production!]
  updatedAt: ISO8601DateTime!
  users: [User!]
}

type Performance {
  createdAt: ISO8601DateTime!
  doorsOpenAt: ISO8601DateTime
  id: ID!
  name: String
  productionId: Int!
  showtimeAt: ISO8601DateTime
  updatedAt: ISO8601DateTime!
}

type Production {
  createdAt: ISO8601DateTime!
  id: ID!
  organizationId: Int!
  performanceCount: Int!

  """
  Performances of the given production
  """
  performances: [Performance!]
  runtimeMinutes: Int
  ticketTypes: [Ticket!]
  title: String
  updatedAt: ISO8601DateTime!
}

type Query {
  """
  A single organization
  """
  organization(id: ID!): Organization!

  """
  All organizations
  """
  organizations: [Organization!]

  """
  A single production
  """
  production(id: ID!, organizationId: ID!): Production!
}

"""
Autogenerated return type of SignInUser
"""
type SignInUserPayload {
  token: String
  user: User
}

type Ticket {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String
  priceInCents: Int
  productionId: Int!
  updatedAt: ISO8601DateTime!
}

type User {
  createdAt: ISO8601DateTime!
  email: String
  id: ID!
  name: String
  organizationId: Int!
  updatedAt: ISO8601DateTime!
}
